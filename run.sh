#!/bin/bash

set -e

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# install core and development Python dependencies into the currently activated .venv
function install {
    python -m pip install --upgrade pip
    python -m pip install playwright behave
    python -m pip install playwright-captcha
#    python -m pip install playwright pytest pytest-cov pre-commit
    python -m playwright install
     python -m pip install allure-behave
}

# build and run the tests with allure report
function test:ci {
    # run tests with coverage and generate report
    behave -f allure_behave.formatter:AllureFormatter -o target/allure-results/ features/
    # generate allure report
    allure generate target/allure-results/ -o target/allure-report/
    allure serve target/allure-results/
}

# run linting, formatting, and other static code quality tools
function lint {
    pre-commit run --all-files
}

# same as `lint` but with any special considerations for CI
function lint:ci {
    # We skip no-commit-to-branch since that blocks commits to `main`.
    # All merged PRs are commits to `main` so this must be disabled.
    SKIP=no-commit-to-branch pre-commit run --all-files
}

# execute tests that are not marked as `slow`
function test:quick {
    run-tests -m "not slow" ${@:-"$THIS_DIR/tests/"}
}

# (example) ./run.sh test tests/test_states_info.py::test__slow_add
function run-tests {
    python -m pytest ${@:-"$THIS_DIR/tests/"}
}

function test:wheel-locally {
    conda deactivate || true
    rm -rf test-env || true
    python -m venv test-env
    source test-env/bin/activate
    clean || true
    pip install build
    build
    pip install ./dist/*.whl pytest pytest-cov
    test:ci
    deactivate || true
}


# remove all files generated by tests, builds, or operating this codebase
function clean {
    rm -rf dist build coverage.xml test-reports sample/ tests/cookiecutter*.json outdir target
    find . \
      -type d \
      \( \
        -name "*cache*" \
        -o -name "*.dist-info" \
        -o -name "*.egg-info" \
        -o -name "*htmlcov" \
      \) \
      -not -path "*env/*" \
      -exec rm -r {} + || true

    find . \
      -type f \
      -name "*.pyc" \
      -not -path "*env/*" \
      -exec rm {} + || true
}

# export the contents of .env as environment variables
function try-load-dotenv {
    if [ ! -f "$THIS_DIR/.env" ]; then
        echo "no .env file found"
        return 1
    fi

    while read -r line; do
        export "$line"
    done < <(grep -v '^#' "$THIS_DIR/.env" | grep -v '^$')
}

# args:
#   REPO_NAME - the name of the repo to create
#   GITHUB_USERNAME - the username of the user creating the repo
#   IS_PUBLIC_REPO - if true, the repo will be public, otherwise private
function create-repo-if-not-exists {
    local IS_PUBLIC_REPO=${IS_PUBLIC_REPO:-false}

    # check if the repo already exists; if it does, return
    echo "Checking if repo $GITHUB_USERNAME/$REPO_NAME exists..."
    gh repo view "$GITHUB_USERNAME/$REPO_NAME" &>/dev/null \
    && echo "Repo $GITHUB_USERNAME/$REPO_NAME already exists." && return 0

    # create the repo
    if [ "$IS_PUBLIC_REPO" = "true" ]; then
        PUBLIC_OR_PRIVATE="public"
    else
        PUBLIC_OR_PRIVATE="private"
    fi
    echo "Creating repo $GITHUB_USERNAME/$REPO_NAME..."
    gh repo create "$GITHUB_USERNAME/$REPO_NAME" "--$PUBLIC_OR_PRIVATE"

    push-initial-readme-to-repo

}

# args:
#   REPO_NAME - the name of the repo to create
#   GITHUB_USERNAME - the username of the user creating the repo
function push-initial-readme-to-repo {
    rm -rf "$REPO_NAME"
    gh repo clone "$GITHUB_USERNAME/$REPO_NAME" || true
    cd "$REPO_NAME" || return 1
    echo "Repo $REPO_NAME created." > "README.md"
    git branch -M main || true
    git add --all
    git commit -m "feat: created repo $GITHUB_USERNAME/$REPO_NAME" README.md

    # if GH_TOKEN is set, set the remote url to it
    if [[ -n "$GH_TOKEN" ]]; then
        git remote set-url origin "https://$GITHUB_USERNAME:$GH_TOKEN@github.com/sahlas/$REPO_NAME"
    fi
    git push origin main
}



# print all functions in this file
function help {
    echo "$0 <task> <args>"
    echo "Tasks:"
    compgen -A function | cat -n
}

TIMEFORMAT="Task completed in %3lR"
time ${@:-help}
